{
    "Description": "ELK Environment deployment scripts.", 
    "Mappings": {
        "RegionMap": {
            "ap-northeast-1": {
                "az0Name": "ap-northeast-1a", 
                "az1Name": "ap-northeast-1c", 
                "elbAccountId": "582318560864", 
                "natAmiId": "ami-5f840e5e", 
                "ubuntu1404LtsAmiId": "ami-e74b60e6"
            }, 
            "ap-southeast-1": {
                "az0Name": "ap-southeast-1a", 
                "az1Name": "ap-southeast-1b", 
                "elbAccountId": "114774131450", 
                "natAmiId": "ami-780a432a", 
                "ubuntu1404LtsAmiId": "ami-d6e7c084"
            }, 
            "ap-southeast-2": {
                "az0Name": "ap-southeast-2a", 
                "az1Name": "ap-southeast-2b", 
                "elbAccountId": "783225319266", 
                "natAmiId": "ami-0154c73b", 
                "ubuntu1404LtsAmiId": "ami-1711732d"
            }, 
            "eu-central-1": {
                "az0Name": "eu-central-1a", 
                "az1Name": "eu-central-1b"
            }, 
            "eu-west-1": {
                "az0Name": "eu-west-1a", 
                "az1Name": "eu-west-1b", 
                "az2Name": "eu-west-1c", 
                "elbAccountId": "156460612806", 
                "natAmiId": "ami-ed352799", 
                "ubuntu1404LtsAmiId": "ami-f0b11187"
            }, 
            "eu-west-2": {
                "natAmiId": "ami-6c487e71", 
                "ubuntu1404LtsAmiId": "ami-b83c0aa5"
            }, 
            "sa-east-1": {
                "az0Name": "sa-east-1a", 
                "az1Name": "sa-east-1b", 
                "elbAccountId": "507241528517", 
                "natAmiId": "ami-7660c56b", 
                "ubuntu1404LtsAmiId": "ami-69d26774"
            }, 
            "us-east-1": {
                "az0Name": "us-east-1a", 
                "az1Name": "us-east-1c", 
                "az2Name": "us-east-1d", 
                "az3Name": "us-east-1e", 
                "elbAccountId": "127311923021", 
                "natAmiId": "ami-4f9fee26", 
                "ubuntu1404LtsAmiId": "ami-9eaa1cf6"
            }, 
            "us-gov-west-1": {
                "elbAccountId": "048591011584"
            }, 
            "us-west-1": {
                "az0Name": "us-west-1b", 
                "az1Name": "us-west-1c", 
                "elbAccountId": "027434742980", 
                "natAmiId": "ami-7850793d", 
                "ubuntu1404LtsAmiId": "ami-076e6542"
            }, 
            "us-west-2": {
                "az0Name": "us-west-2a", 
                "az1Name": "us-west-2b", 
                "az2Name": "us-west-2c", 
                "elbAccountId": "797873946194", 
                "natAmiId": "ami-6d29b85d", 
                "ubuntu1404LtsAmiId": "ami-3d50120d"
            }
        }, 
        "networkAddresses": {
            "subnet0": {
                "private": "172.16.4.0/22", 
                "public": "172.16.0.0/24"
            }, 
            "subnet1": {
                "private": "172.16.8.0/22", 
                "public": "172.16.1.0/24"
            }, 
            "vpcBase": {
                "cidr": "172.16.0.0/20"
            }
        }
    }, 
    "Outputs": {
        "cloudTrailLoggingBucketAndPath": {
            "Description": "S3 bucket and key name prefix to use when configuring CloudTrail to aggregate logs to S3", 
            "Value": {
                "Fn::Join": [
                    "", 
                    [
                        "arn:aws:s3:::", 
                        {
                            "Ref": "demoUtilityBucket"
                        }, 
                        ""
                    ]
                ]
            }
        }, 
        "dateGenerated": {
            "Description": "UTC datetime representation of when this template was generated", 
            "Value": "2014-12-11 05:33:02.500803"
        }, 
        "elbAccessLoggingBucketAndPath": {
            "Description": "S3 bucket and key name prefix to use when configuring elb access logs to aggregate to S3", 
            "Value": {
                "Fn::Join": [
                    "", 
                    [
                        "arn:aws:s3:::", 
                        {
                            "Ref": "demoUtilityBucket"
                        }, 
                        ""
                    ]
                ]
            }
        }, 
        "templateValidationHash": {
            "Description": "Hash of this template that can be used as a simple means of validating whether a template has been changed since it was generated.", 
            "Value": "4efc4b576382dc31383f36f96e00b6f3e20080ae9055a7cdec5262fad0c668ca"
        }
    }, 
    "Parameters": {
        "bastionEc2Key": {
            "Description": "EC2 key to use when deploying the bastion instance", 
            "Type": "String"
        }, 
        "bastionInstanceType": {
            "AllowedValues": [
                "t1.micro", 
                "m3.medium", 
                "m3.large", 
                "m3.xlarge", 
                "m3.2xlarge", 
                "m1.small", 
                "m1.medium", 
                "m1.large", 
                "m1.xlarge", 
                "c3.large", 
                "c3.xlarge", 
                "c3.2xlarge", 
                "c3.4xlarge", 
                "c3.8xlarge", 
                "c1.medium", 
                "c1.xlarge", 
                "cc2.xlarge", 
                "g2.2xlarge", 
                "cg1.4xlarge", 
                "m2.xlarge", 
                "m2.2xlarge", 
                "m2.4xlarge", 
                "cr1.8xlarge", 
                "i2.xlarge", 
                "i2.2xlarge", 
                "i2.4xlarge", 
                "hs1.8xlarge", 
                "hs1.4xlarge"
            ], 
            "ConstraintDescription": "must be a valid EC2 instance type.", 
            "Default": "t1.micro", 
            "Description": "Instance type to use when launching the Bastion host for access to resources that are not publicly exposed", 
            "Type": "String"
        }, 
        "ec2Key": {
            "AllowedPattern": "[\\x20-\\x7E]*", 
            "ConstraintDescription": "can only contain ASCII chacacters.", 
            "Default": "", 
            "Description": "Name of an existing EC2 KeyPair to enable SSH access to the instances", 
            "MaxLength": 255, 
            "MinLength": 1, 
            "Type": "String"
        }, 
        "elasticsearchClusterName": {
            "ConstraintDescription": "Cluster name must be at least 4 and no more than 32 characters long.", 
            "Default": "ElkDemo", 
            "Description": "Name to assign to the cluster itself. Used for identifying the whole Elasticsearch cluster together as a group.", 
            "MaxLength": 32, 
            "MinLength": 4, 
            "Type": "String"
        }, 
        "logstashIndexerMaxClusterSize": {
            "ConstraintDescription": "Logstash indexer size must be at least 4 and no larger than 4", 
            "Default": "4", 
            "Description": "Maximum size the indexer cluster will scale up to", 
            "MaxValue": 4, 
            "MinValue": 1, 
            "Type": "Number"
        }, 
        "natInstanceType": {
            "AllowedValues": [
                "t1.micro", 
                "m3.medium", 
                "m3.large", 
                "m3.xlarge", 
                "m3.2xlarge", 
                "m1.small", 
                "m1.medium", 
                "m1.large", 
                "m1.xlarge", 
                "c3.large", 
                "c3.xlarge", 
                "c3.2xlarge", 
                "c3.4xlarge", 
                "c3.8xlarge", 
                "c1.medium", 
                "c1.xlarge", 
                "cc2.xlarge", 
                "g2.2xlarge", 
                "cg1.4xlarge", 
                "m2.xlarge", 
                "m2.2xlarge", 
                "m2.4xlarge", 
                "cr1.8xlarge", 
                "i2.xlarge", 
                "i2.2xlarge", 
                "i2.4xlarge", 
                "hs1.8xlarge", 
                "hs1.4xlarge"
            ], 
            "ConstraintDescription": "must be a valid EC2 instance type.", 
            "Default": "m1.small", 
            "Description": "Instance type to use when launching NAT instances.", 
            "Type": "String"
        }, 
        "remoteAccessLocation": {
            "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})", 
            "ConstraintDescription": "must be a valid CIDR range of the form x.x.x.x/x", 
            "Default": "0.0.0.0/0", 
            "Description": "CIDR block identifying the network address space that will be allowed to ingress into public access points within this solution", 
            "MaxLength": 18, 
            "MinLength": 9, 
            "Type": "String"
        }
    }, 
    "Resources": {
        "bastionASGAutoScalingGroup": {
            "Properties": {
                "AvailabilityZones": [
                    {
                        "Fn::FindInMap": [
                            "RegionMap", 
                            {
                                "Ref": "AWS::Region"
                            }, 
                            "az0Name"
                        ]
                    }, 
                    {
                        "Fn::FindInMap": [
                            "RegionMap", 
                            {
                                "Ref": "AWS::Region"
                            }, 
                            "az1Name"
                        ]
                    }
                ], 
                "DesiredCapacity": 1, 
                "LaunchConfigurationName": {
                    "Ref": "bastionASGLaunchConfiguration"
                }, 
                "LoadBalancerNames": [
                    {
                        "Ref": "bastionElb"
                    }
                ], 
                "MaxSize": 1, 
                "MinSize": 1, 
                "Tags": [
                    {
                        "Key": "Name", 
                        "PropagateAtLaunch": true, 
                        "Value": "bastionASG"
                    }
                ], 
                "TerminationPolicies": [
                    "OldestLaunchConfiguration", 
                    "ClosestToNextInstanceHour", 
                    "Default"
                ], 
                "VPCZoneIdentifier": [
                    {
                        "Ref": "privateSubnet1"
                    }, 
                    {
                        "Ref": "privateSubnet0"
                    }
                ]
            }, 
            "Type": "AWS::AutoScaling::AutoScalingGroup"
        }, 
        "bastionASGLaunchConfiguration": {
            "Properties": {
                "IamInstanceProfile": {
                    "Ref": "bastionInstancePolicy"
                }, 
                "ImageId": {
                    "Fn::FindInMap": [
                        "RegionMap", 
                        {
                            "Ref": "AWS::Region"
                        }, 
                        "ubuntu1404LtsAmiId"
                    ]
                }, 
                "InstanceMonitoring": "false", 
                "InstanceType": {
                    "Ref": "bastionInstanceType"
                }, 
                "KeyName": {
                    "Ref": "bastionEc2Key"
                }, 
                "SecurityGroups": [
                    {
                        "Ref": "bastionSecurityGroup"
                    }
                ]
            }, 
            "Type": "AWS::AutoScaling::LaunchConfiguration"
        }, 
        "bastionElb": {
            "Properties": {
                "AccessLoggingPolicy": {
                    "EmitInterval": 5, 
                    "Enabled": true, 
                    "S3BucketName": {
                        "Ref": "demoUtilityBucket"
                    }
                }, 
                "CrossZone": "true", 
                "HealthCheck": {
                    "HealthyThreshold": 3, 
                    "Interval": 60, 
                    "Target": "TCP:22", 
                    "Timeout": 5, 
                    "UnhealthyThreshold": 5
                }, 
                "Listeners": [
                    {
                        "InstancePort": "22", 
                        "LoadBalancerPort": "2222", 
                        "Protocol": "TCP"
                    }
                ], 
                "SecurityGroups": [
                    {
                        "Ref": "bastionElbSecurityGroup"
                    }
                ], 
                "Subnets": [
                    {
                        "Ref": "publicSubnet1"
                    }, 
                    {
                        "Ref": "publicSubnet0"
                    }
                ]
            }, 
            "Type": "AWS::ElasticLoadBalancing::LoadBalancer"
        }, 
        "bastionElbSecurityGroup": {
            "Properties": {
                "GroupDescription": "Security group allowing ingress via SSH to this instance along with other standard accessbility port rules", 
                "SecurityGroupIngress": [
                    {
                        "CidrIp": {
                            "Ref": "remoteAccessLocation"
                        }, 
                        "FromPort": "2222", 
                        "IpProtocol": "tcp", 
                        "ToPort": "2222"
                    }
                ], 
                "VpcId": {
                    "Ref": "vpc"
                }
            }, 
            "Type": "AWS::EC2::SecurityGroup"
        }, 
        "bastionElbSecurityGroupEgressSSHToInstance": {
            "Properties": {
                "DestinationSecurityGroupId": {
                    "Ref": "bastionSecurityGroup"
                }, 
                "FromPort": "22", 
                "GroupId": {
                    "Ref": "bastionElbSecurityGroup"
                }, 
                "IpProtocol": "tcp", 
                "ToPort": "22"
            }, 
            "Type": "AWS::EC2::SecurityGroupEgress"
        }, 
        "bastionIAMRole": {
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Action": [
                                "sts:AssumeRole"
                            ], 
                            "Effect": "Allow", 
                            "Principal": {
                                "Service": [
                                    "ec2.amazonaws.com"
                                ]
                            }
                        }
                    ]
                }, 
                "Path": {
                    "Fn::Join": [
                        "", 
                        [
                            "/elkenvironment/", 
                            "bastion", 
                            "/"
                        ]
                    ]
                }, 
                "Policies": [
                    {
                        "PolicyDocument": {
                            "Statement": [
                                {
                                    "Action": [
                                        "sqs:SendMessage"
                                    ], 
                                    "Effect": "Allow", 
                                    "Resource": [
                                        {
                                            "Fn::Join": [
                                                "", 
                                                [
                                                    "arn:aws:sqs:", 
                                                    {
                                                        "Fn::GetAtt": [
                                                            "elkStack", 
                                                            "Outputs.logShipperQueueRegion"
                                                        ]
                                                    }, 
                                                    ":", 
                                                    {
                                                        "Ref": "AWS::AccountId"
                                                    }, 
                                                    ":", 
                                                    {
                                                        "Fn::GetAtt": [
                                                            "elkStack", 
                                                            "Outputs.logShipperQueueName"
                                                        ]
                                                    }
                                                ]
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }, 
                        "PolicyName": "logQueueWrite"
                    }, 
                    {
                        "PolicyDocument": {
                            "Statement": [
                                {
                                    "Action": [
                                        "sqs:Get*", 
                                        "sqs:List*"
                                    ], 
                                    "Effect": "Allow", 
                                    "Resource": "*"
                                }
                            ]
                        }, 
                        "PolicyName": "logReadQueues"
                    }, 
                    {
                        "PolicyDocument": {
                            "Statement": [
                                {
                                    "Action": [
                                        "cloudwatch:PutMetricData"
                                    ], 
                                    "Effect": "Allow", 
                                    "Resource": "*"
                                }
                            ]
                        }, 
                        "PolicyName": "cloudWatchPostData"
                    }
                ]
            }, 
            "Type": "AWS::IAM::Role"
        }, 
        "bastionInstancePolicy": {
            "Properties": {
                "Path": "/elkenvironment/", 
                "Roles": [
                    {
                        "Ref": "bastionIAMRole"
                    }
                ]
            }, 
            "Type": "AWS::IAM::InstanceProfile"
        }, 
        "bastionSecurityGroup": {
            "Properties": {
                "GroupDescription": "Security group allowing ingress via SSH to this instance along with other standard accessbility port rules", 
                "SecurityGroupEgress": [
                    {
                        "CidrIp": {
                            "Fn::FindInMap": [
                                "networkAddresses", 
                                "vpcBase", 
                                "cidr"
                            ]
                        }, 
                        "FromPort": "22", 
                        "IpProtocol": "tcp", 
                        "ToPort": "22"
                    }, 
                    {
                        "CidrIp": "0.0.0.0/0", 
                        "FromPort": "80", 
                        "IpProtocol": "tcp", 
                        "ToPort": "80"
                    }, 
                    {
                        "CidrIp": "0.0.0.0/0", 
                        "FromPort": "443", 
                        "IpProtocol": "tcp", 
                        "ToPort": "443"
                    }
                ], 
                "SecurityGroupIngress": [
                    {
                        "FromPort": "22", 
                        "IpProtocol": "tcp", 
                        "SourceSecurityGroupId": {
                            "Ref": "bastionElbSecurityGroup"
                        }, 
                        "ToPort": "22"
                    }
                ], 
                "VpcId": {
                    "Ref": "vpc"
                }
            }, 
            "Type": "AWS::EC2::SecurityGroup"
        }, 
        "commonSecurityGroup": {
            "Properties": {
                "GroupDescription": "Security Group allows ingress and egress for common usage patterns throughout this deployed infrastructure.", 
                "SecurityGroupEgress": [
                    {
                        "CidrIp": "0.0.0.0/0", 
                        "FromPort": "80", 
                        "IpProtocol": "tcp", 
                        "ToPort": "80"
                    }, 
                    {
                        "CidrIp": "0.0.0.0/0", 
                        "FromPort": "443", 
                        "IpProtocol": "tcp", 
                        "ToPort": "443"
                    }, 
                    {
                        "CidrIp": "0.0.0.0/0", 
                        "FromPort": "123", 
                        "IpProtocol": "udp", 
                        "ToPort": "123"
                    }
                ], 
                "SecurityGroupIngress": [
                    {
                        "CidrIp": {
                            "Fn::FindInMap": [
                                "networkAddresses", 
                                "vpcBase", 
                                "cidr"
                            ]
                        }, 
                        "FromPort": "22", 
                        "IpProtocol": "tcp", 
                        "ToPort": "22"
                    }
                ], 
                "VpcId": {
                    "Ref": "vpc"
                }
            }, 
            "Type": "AWS::EC2::SecurityGroup"
        }, 
        "demoUtilityBucket": {
            "Type": "AWS::S3::Bucket"
        }, 
        "demoUtilityBucketLoggingPolicy": {
            "Properties": {
                "Bucket": {
                    "Ref": "demoUtilityBucket"
                }, 
                "PolicyDocument": {
                    "Statement": [
                        {
                            "Action": [
                                "s3:PutObject"
                            ], 
                            "Effect": "Allow", 
                            "Principal": {
                                "AWS": [
                                    {
                                        "Fn::FindInMap": [
                                            "RegionMap", 
                                            {
                                                "Ref": "AWS::Region"
                                            }, 
                                            "elbAccountId"
                                        ]
                                    }
                                ]
                            }, 
                            "Resource": {
                                "Fn::Join": [
                                    "", 
                                    [
                                        "arn:aws:s3:::", 
                                        {
                                            "Ref": "demoUtilityBucket"
                                        }, 
                                        "/", 
                                        "AWSLogs/", 
                                        {
                                            "Ref": "AWS::AccountId"
                                        }, 
                                        "/*"
                                    ]
                                ]
                            }
                        }, 
                        {
                            "Action": [
                                "s3:GetBucketAcl"
                            ], 
                            "Effect": "Allow", 
                            "Principal": {
                                "AWS": [
                                    "arn:aws:iam::903692715234:root", 
                                    "arn:aws:iam::859597730677:root", 
                                    "arn:aws:iam::814480443879:root", 
                                    "arn:aws:iam::216624486486:root", 
                                    "arn:aws:iam::086441151436:root", 
                                    "arn:aws:iam::388731089494:root", 
                                    "arn:aws:iam::284668455005:root", 
                                    "arn:aws:iam::113285607260:root"
                                ]
                            }, 
                            "Resource": {
                                "Fn::Join": [
                                    "", 
                                    [
                                        "arn:aws:s3:::", 
                                        {
                                            "Ref": "demoUtilityBucket"
                                        }
                                    ]
                                ]
                            }
                        }, 
                        {
                            "Action": [
                                "s3:PutObject"
                            ], 
                            "Condition": {
                                "StringEquals": {
                                    "s3:x-amz-acl": "bucket-owner-full-control"
                                }
                            }, 
                            "Effect": "Allow", 
                            "Principal": {
                                "AWS": [
                                    "arn:aws:iam::903692715234:root", 
                                    "arn:aws:iam::859597730677:root", 
                                    "arn:aws:iam::814480443879:root", 
                                    "arn:aws:iam::216624486486:root", 
                                    "arn:aws:iam::086441151436:root", 
                                    "arn:aws:iam::388731089494:root", 
                                    "arn:aws:iam::284668455005:root", 
                                    "arn:aws:iam::113285607260:root"
                                ]
                            }, 
                            "Resource": {
                                "Fn::Join": [
                                    "", 
                                    [
                                        "arn:aws:s3:::", 
                                        {
                                            "Ref": "demoUtilityBucket"
                                        }, 
                                        "/", 
                                        "AWSLogs/", 
                                        {
                                            "Ref": "AWS::AccountId"
                                        }, 
                                        "/*"
                                    ]
                                ]
                            }
                        }
                    ]
                }
            }, 
            "Type": "AWS::S3::BucketPolicy"
        }, 
        "elkStack": {
            "Properties": {
                "Parameters": {
                    "availabilityZone0": {
                        "Fn::GetAtt": [
                            "privateSubnet0", 
                            "AvailabilityZone"
                        ]
                    }, 
                    "availabilityZone1": {
                        "Fn::GetAtt": [
                            "privateSubnet1", 
                            "AvailabilityZone"
                        ]
                    }, 
                    "commonSecurityGroup": {
                        "Ref": "commonSecurityGroup"
                    }, 
                    "ec2Key": {
                        "Ref": "ec2Key"
                    }, 
                    "elasticsearchClusterName": {
                        "Ref": "elasticsearchClusterName"
                    }, 
                    "logstashIndexerMaxClusterSize": {
                        "Ref": "logstashIndexerMaxClusterSize"
                    }, 
                    "privateSubnet0": {
                        "Ref": "privateSubnet0"
                    }, 
                    "privateSubnet1": {
                        "Ref": "privateSubnet1"
                    }, 
                    "publicSubnet0": {
                        "Ref": "publicSubnet0"
                    }, 
                    "publicSubnet1": {
                        "Ref": "publicSubnet1"
                    }, 
                    "remoteAccessLocation": {
                        "Ref": "remoteAccessLocation"
                    }, 
                    "utilityBucket": {
                        "Ref": "demoUtilityBucket"
                    }, 
                    "vpcCidr": {
                        "Fn::FindInMap": [
                            "networkAddresses", 
                            "vpcBase", 
                            "cidr"
                        ]
                    }, 
                    "vpcId": {
                        "Ref": "vpc"
                    }
                }, 
                "TemplateURL": "https://cfdev-dualspark.s3.amazonaws.com/devtools/elk.1418275982.template", 
                "TimeoutInMinutes": "20"
            }, 
            "Type": "AWS::CloudFormation::Stack"
        }, 
        "igwVpcAttachment": {
            "Properties": {
                "InternetGatewayId": {
                    "Ref": "vpcIgw"
                }, 
                "VpcId": {
                    "Ref": "vpc"
                }
            }, 
            "Type": "AWS::EC2::VPCGatewayAttachment"
        }, 
        "privateSubnet0": {
            "Properties": {
                "AvailabilityZone": {
                    "Fn::FindInMap": [
                        "RegionMap", 
                        {
                            "Ref": "AWS::Region"
                        }, 
                        "az0Name"
                    ]
                }, 
                "CidrBlock": {
                    "Fn::FindInMap": [
                        "networkAddresses", 
                        "subnet0", 
                        "private"
                    ]
                }, 
                "VpcId": {
                    "Ref": "vpc"
                }
            }, 
            "Type": "AWS::EC2::Subnet"
        }, 
        "privateSubnet0EgressRoute": {
            "Properties": {
                "DestinationCidrBlock": "0.0.0.0/0", 
                "InstanceId": {
                    "Ref": "public0NATInstance"
                }, 
                "RouteTableId": {
                    "Ref": "privateSubnet0RouteTable"
                }
            }, 
            "Type": "AWS::EC2::Route"
        }, 
        "privateSubnet0EgressRouteTableAssociation": {
            "Properties": {
                "RouteTableId": {
                    "Ref": "privateSubnet0RouteTable"
                }, 
                "SubnetId": {
                    "Ref": "privateSubnet0"
                }
            }, 
            "Type": "AWS::EC2::SubnetRouteTableAssociation"
        }, 
        "privateSubnet0RouteTable": {
            "Properties": {
                "VpcId": {
                    "Ref": "vpc"
                }
            }, 
            "Type": "AWS::EC2::RouteTable"
        }, 
        "privateSubnet1": {
            "Properties": {
                "AvailabilityZone": {
                    "Fn::FindInMap": [
                        "RegionMap", 
                        {
                            "Ref": "AWS::Region"
                        }, 
                        "az1Name"
                    ]
                }, 
                "CidrBlock": {
                    "Fn::FindInMap": [
                        "networkAddresses", 
                        "subnet1", 
                        "private"
                    ]
                }, 
                "VpcId": {
                    "Ref": "vpc"
                }
            }, 
            "Type": "AWS::EC2::Subnet"
        }, 
        "privateSubnet1EgressRoute": {
            "Properties": {
                "DestinationCidrBlock": "0.0.0.0/0", 
                "InstanceId": {
                    "Ref": "public1NATInstance"
                }, 
                "RouteTableId": {
                    "Ref": "privateSubnet1RouteTable"
                }
            }, 
            "Type": "AWS::EC2::Route"
        }, 
        "privateSubnet1EgressRouteTableAssociation": {
            "Properties": {
                "RouteTableId": {
                    "Ref": "privateSubnet1RouteTable"
                }, 
                "SubnetId": {
                    "Ref": "privateSubnet1"
                }
            }, 
            "Type": "AWS::EC2::SubnetRouteTableAssociation"
        }, 
        "privateSubnet1RouteTable": {
            "Properties": {
                "VpcId": {
                    "Ref": "vpc"
                }
            }, 
            "Type": "AWS::EC2::RouteTable"
        }, 
        "public0NATInstance": {
            "Properties": {
                "AvailabilityZone": {
                    "Fn::FindInMap": [
                        "RegionMap", 
                        {
                            "Ref": "AWS::Region"
                        }, 
                        "az0Name"
                    ]
                }, 
                "ImageId": {
                    "Fn::FindInMap": [
                        "RegionMap", 
                        {
                            "Ref": "AWS::Region"
                        }, 
                        "natAmiId"
                    ]
                }, 
                "InstanceType": {
                    "Ref": "natInstanceType"
                }, 
                "KeyName": {
                    "Ref": "ec2Key"
                }, 
                "NetworkInterfaces": [
                    {
                        "AssociatePublicIpAddress": "true", 
                        "DeleteOnTermination": "true", 
                        "DeviceIndex": "0", 
                        "GroupSet": [
                            {
                                "Ref": "publicSubnet0SecurityGroup"
                            }
                        ], 
                        "SubnetId": {
                            "Ref": "publicSubnet0"
                        }
                    }
                ], 
                "SourceDestCheck": "false"
            }, 
            "Type": "AWS::EC2::Instance"
        }, 
        "public1NATInstance": {
            "Properties": {
                "AvailabilityZone": {
                    "Fn::FindInMap": [
                        "RegionMap", 
                        {
                            "Ref": "AWS::Region"
                        }, 
                        "az1Name"
                    ]
                }, 
                "ImageId": {
                    "Fn::FindInMap": [
                        "RegionMap", 
                        {
                            "Ref": "AWS::Region"
                        }, 
                        "natAmiId"
                    ]
                }, 
                "InstanceType": {
                    "Ref": "natInstanceType"
                }, 
                "KeyName": {
                    "Ref": "ec2Key"
                }, 
                "NetworkInterfaces": [
                    {
                        "AssociatePublicIpAddress": "true", 
                        "DeleteOnTermination": "true", 
                        "DeviceIndex": "0", 
                        "GroupSet": [
                            {
                                "Ref": "publicSubnet1SecurityGroup"
                            }
                        ], 
                        "SubnetId": {
                            "Ref": "publicSubnet1"
                        }
                    }
                ], 
                "SourceDestCheck": "false"
            }, 
            "Type": "AWS::EC2::Instance"
        }, 
        "publicSubnet0": {
            "Properties": {
                "AvailabilityZone": {
                    "Fn::FindInMap": [
                        "RegionMap", 
                        {
                            "Ref": "AWS::Region"
                        }, 
                        "az0Name"
                    ]
                }, 
                "CidrBlock": {
                    "Fn::FindInMap": [
                        "networkAddresses", 
                        "subnet0", 
                        "public"
                    ]
                }, 
                "VpcId": {
                    "Ref": "vpc"
                }
            }, 
            "Type": "AWS::EC2::Subnet"
        }, 
        "publicSubnet0EgressRoute": {
            "DependsOn": [
                "igwVpcAttachment"
            ], 
            "Properties": {
                "DestinationCidrBlock": "0.0.0.0/0", 
                "GatewayId": {
                    "Ref": "vpcIgw"
                }, 
                "RouteTableId": {
                    "Ref": "publicSubnet0RouteTable"
                }
            }, 
            "Type": "AWS::EC2::Route"
        }, 
        "publicSubnet0EgressRouteTableAssociation": {
            "Properties": {
                "RouteTableId": {
                    "Ref": "publicSubnet0RouteTable"
                }, 
                "SubnetId": {
                    "Ref": "publicSubnet0"
                }
            }, 
            "Type": "AWS::EC2::SubnetRouteTableAssociation"
        }, 
        "publicSubnet0RouteTable": {
            "Properties": {
                "VpcId": {
                    "Ref": "vpc"
                }
            }, 
            "Type": "AWS::EC2::RouteTable"
        }, 
        "publicSubnet0SecurityGroup": {
            "Properties": {
                "GroupDescription": "Security Group for the public subnet for az 0", 
                "SecurityGroupEgress": [
                    {
                        "CidrIp": "0.0.0.0/0", 
                        "FromPort": "-1", 
                        "IpProtocol": "-1", 
                        "ToPort": "-1"
                    }
                ], 
                "SecurityGroupIngress": [
                    {
                        "CidrIp": {
                            "Fn::FindInMap": [
                                "networkAddresses", 
                                "subnet0", 
                                "private"
                            ]
                        }, 
                        "FromPort": "-1", 
                        "IpProtocol": "-1", 
                        "ToPort": "-1"
                    }
                ], 
                "VpcId": {
                    "Ref": "vpc"
                }
            }, 
            "Type": "AWS::EC2::SecurityGroup"
        }, 
        "publicSubnet1": {
            "Properties": {
                "AvailabilityZone": {
                    "Fn::FindInMap": [
                        "RegionMap", 
                        {
                            "Ref": "AWS::Region"
                        }, 
                        "az1Name"
                    ]
                }, 
                "CidrBlock": {
                    "Fn::FindInMap": [
                        "networkAddresses", 
                        "subnet1", 
                        "public"
                    ]
                }, 
                "VpcId": {
                    "Ref": "vpc"
                }
            }, 
            "Type": "AWS::EC2::Subnet"
        }, 
        "publicSubnet1EgressRoute": {
            "DependsOn": [
                "igwVpcAttachment"
            ], 
            "Properties": {
                "DestinationCidrBlock": "0.0.0.0/0", 
                "GatewayId": {
                    "Ref": "vpcIgw"
                }, 
                "RouteTableId": {
                    "Ref": "publicSubnet1RouteTable"
                }
            }, 
            "Type": "AWS::EC2::Route"
        }, 
        "publicSubnet1EgressRouteTableAssociation": {
            "Properties": {
                "RouteTableId": {
                    "Ref": "publicSubnet1RouteTable"
                }, 
                "SubnetId": {
                    "Ref": "publicSubnet1"
                }
            }, 
            "Type": "AWS::EC2::SubnetRouteTableAssociation"
        }, 
        "publicSubnet1RouteTable": {
            "Properties": {
                "VpcId": {
                    "Ref": "vpc"
                }
            }, 
            "Type": "AWS::EC2::RouteTable"
        }, 
        "publicSubnet1SecurityGroup": {
            "Properties": {
                "GroupDescription": "Security Group for the public subnet for az 1", 
                "SecurityGroupEgress": [
                    {
                        "CidrIp": "0.0.0.0/0", 
                        "FromPort": "-1", 
                        "IpProtocol": "-1", 
                        "ToPort": "-1"
                    }
                ], 
                "SecurityGroupIngress": [
                    {
                        "CidrIp": {
                            "Fn::FindInMap": [
                                "networkAddresses", 
                                "subnet1", 
                                "private"
                            ]
                        }, 
                        "FromPort": "-1", 
                        "IpProtocol": "-1", 
                        "ToPort": "-1"
                    }
                ], 
                "VpcId": {
                    "Ref": "vpc"
                }
            }, 
            "Type": "AWS::EC2::SecurityGroup"
        }, 
        "vpc": {
            "Properties": {
                "CidrBlock": {
                    "Fn::FindInMap": [
                        "networkAddresses", 
                        "vpcBase", 
                        "cidr"
                    ]
                }, 
                "EnableDnsHostnames": "true", 
                "EnableDnsSupport": "true", 
                "Tags": [
                    {
                        "Key": "Name", 
                        "Value": "DevDeploy"
                    }
                ]
            }, 
            "Type": "AWS::EC2::VPC"
        }, 
        "vpcIgw": {
            "Type": "AWS::EC2::InternetGateway"
        }
    }
}