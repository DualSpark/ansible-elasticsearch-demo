---
- name: install EPEL repo
  yum: name=http://fedora.mirrors.pair.com/epel/7/x86_64/e/epel-release-7-5.noarch.rpm state=present

- name: yum update all the things
  yum: name=* state=latest

- name: install some useful packages 
  yum: name={{ item }} state=latest enablerepo=epel-testing
  with_items:
  - python-pip

- name: install aws cli for cloudformation deployment
  shell: pip install {{ item }}
  with_items:
  - boto
  - awscli

- name: install cloudformation build dependencies
  shell: /usr/bin/pip install -r /vagrant/cloudformation/requirements.txt

- name: create extract folder
  file: dest=/etc/ansible mode=640 owner=root group=root state=directory

- name: create AWS EC2 Keys
  shell: chdir=/vagrant/cloudformation creates=/vagrant/cloudformation/awskeys.json python demokeys.py create {{ ec2_key_name | default('ec2InstanceKey') }} {{ bastion_key_name | default('bastionInstanceKey') }} --aws_region {{ aws_region }}

- name: generate cloudformation template
  shell: chdir=/vagrant/cloudformation creates=/vagrant/cloudformation/{{ cf_template_name | default('elkenvironment.debug.template') }} python cfgenerator.py build local_dev_args.json --aws_region {{ aws_region }} --s3_bucket {{ s3_bucket }} --output_file {{ cf_template_name | default('elkenvironment.debug.template') }}

- name: upload template to s3_bucket
  shell: creates=/vagrant/cloudformation/upload.log aws s3 cp /vagrant/cloudformation/{{ cf_template_name | default('elkenvironment.debug.template') }} s3://{{ s3_bucket }}/{{ cf_template_name | default('elkenvironment.debug.template') }} --region {{ aws_region }} > /vagrant/cloudformation/upload.log

- name: deploy cloudformation to AWS
  cloudformation: 
    stack_name: "ansible-elk-cloudformation"
    state: "present"
    region: "{{ aws_region | default('us-west-2') }}"
    template: "/vagrant/cloudformation/{{ cf_template_name | default('elkenvironment.debug.template') }}"
    template_parameters:
      bastionEc2Key: "{{ bastion_key_name | default('bastionInstanceKey') }}"
      bastionInstanceType: "{{ bastion_instance_type | default('t1.micro') }}"
      ec2Key: "{{ ec2_key_name | default('demoInstanceKey')}}"
      natInstanceType: "{{ nat_instance_type | default('m1.small') }}"
      remoteAccessLocation: "{{ remoteAccessLocation | default('0.0.0.0/0' )}}"
  ignore_errors: True
